<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tobin4j.github.io</id>
    <title>李白光的个人博客🌠</title>
    <updated>2020-01-06T08:20:43.898Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tobin4j.github.io"/>
    <link rel="self" href="https://tobin4j.github.io/atom.xml"/>
    <subtitle>热爱可抵岁月漫长</subtitle>
    <logo>https://tobin4j.github.io/images/avatar.png</logo>
    <icon>https://tobin4j.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 李白光的个人博客🌠</rights>
    <entry>
        <title type="html"><![CDATA[Scala学习笔记]]></title>
        <id>https://tobin4j.github.io/post/scala-xue-xi-bi-ji</id>
        <link href="https://tobin4j.github.io/post/scala-xue-xi-bi-ji">
        </link>
        <updated>2019-12-28T12:58:32.000Z</updated>
        <summary type="html"><![CDATA[<p>主要记录学习Scala基础语法，因为我主语言是Java，笔记主要比较了和Java的异同。</p>
]]></summary>
        <content type="html"><![CDATA[<p>主要记录学习Scala基础语法，因为我主语言是Java，笔记主要比较了和Java的异同。</p>
<!-- more -->
<blockquote>
<p>语言特点:编译后同样是.class文件允许在Jvm的语言，和Java包无缝互调</p>
</blockquote>
<h3 id="变量类型">变量类型</h3>
<ol>
<li>普通变量</li>
</ol>
<pre><code class="language-java">var myVar : String = &quot;Foo&quot;
</code></pre>
<p>代表声明了一个变量叫 myVar ，类型是 String , 值是 “foo”<br>
如果不声明冒号后面的String，则会默认推断值的类型<br>
2. 常量</p>
<pre><code class="language-java">val myVar : String = &quot;Foo&quot;
</code></pre>
<p>不同的是改声明的变量后续不能被再次赋值<br>
3. 多个变量声明</p>
<pre><code class="language-java">var a,b = 1 //两个变量都声明为1
</code></pre>
<ol start="4">
<li>方法返回值是元祖</li>
</ol>
<pre><code class="language-java">var tmp = (1,2)
</code></pre>
<blockquote>
<p>可以直接接受然后推测类型</p>
</blockquote>
<h3 id="访问修饰符">访问修饰符</h3>
<p>不声明默认是public，priate和protected比Java更严格</p>
<pre><code class="language-java">//作用域保护
private[x] 
//x是包名,代表其声明的类或对象对x包中的类开放
protected[x]
</code></pre>
<h3 id="运算符">运算符</h3>
<p>scala没有++,--运算符</p>
<h3 id="循环">循环</h3>
<ul>
<li>while 和 do...while和Java一样</li>
<li>没有break和continue(有包可以解决)</li>
</ul>
<pre><code class="language-java">for (a &lt;- 1 to 10){
    //遍历1到10（包含）
}

for (a &lt;- 1 until 10){
    //遍历1到10（不包含）
}

for (a &lt;- 1 to 10;b &lt;- 1 to 15 ){
    //遍历a和b所有存在的组合(相当去嵌套循环)
}

for (a &lt;- list){
    //遍历集合对象
}

for (a &lt;- 1 to 10
    if a%2==0){
    //for循环机中过滤
}

var sl= for (a &lt;- 1 until 10){
    //将遍历结果a汇总后赋值给sl
      }yield a
</code></pre>
<h3 id="方法与函数">方法与函数</h3>
<ol>
<li>方法定义</li>
</ol>
<pre><code class="language-java">//定义一个方法叫add,接受两个Int类型的参数,返回值是Int
//只有一行大括号和return可以省略
//返回值可以是Unit 相当Java的void
//可以指定默认值
//可以嵌套
def add(x:Int=5,y:Int) : Int = {
    return x+y
}
</code></pre>
<ol start="2">
<li>函数定义</li>
</ol>
<pre><code class="language-java">val add = (x:Int,y:Int) =&gt; x+y
//可以根据参数名指定调用顺序
print(add(y=1,x=2))
//定义可变长参数
def add(args:Int*) ={
    
}
</code></pre>
<ol start="3">
<li>其他</li>
</ol>
<p>https://www.runoob.com/scala/scala-functions.html</p>
<h3 id="闭包">闭包</h3>
<p>闭包是一个函数，返回值依赖于声明在函数外部的一个或多个变量。</p>
<pre><code class="language-java">var a = 2
var fun = (b:Int) =&gt; a+b
</code></pre>
<h3 id="数组">数组</h3>
<ol>
<li>数组定义</li>
</ol>
<pre><code class="language-java">var arr1 : Array[String] = new Array[String](3)
//下标索引
arr1(0)=&quot;str0&quot;
arr1(1)=&quot;str1&quot;
arr1(2)=&quot;str2&quot;
//或
val arr2 = Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;)
//遍历
for (str &lt;- arr2){
  println(str)
}
</code></pre>
<ol start="2">
<li>二维数组</li>
</ol>
<pre><code class="language-java">//定义,赋值,遍历
import Array._
var mat = ofDim[Int](3,3)
for (a &lt;- 0 to 2;b&lt;- 0 until 3){
  mat(a)(b)=666
}
for (a &lt;- 0 to 2){
  for (b&lt;- 0 until 3){
    print(mat(a)(b))
    print(&quot; &quot;)
  }
  println()
}
</code></pre>
<ol start="3">
<li>合并数组</li>
</ol>
<pre><code class="language-java">var myList1 = Array(1.9, 2.9, 3.4, 3.5)
var myList2 = Array(8.9, 7.9, 0.4, 1.5)

var myList3 =  concat( myList1, myList2)

// 输出所有数组元素
for ( x &lt;- myList3 ) {
  println( x )
}
</code></pre>
<ol start="4">
<li>创建区间数组</li>
</ol>
<pre><code class="language-java">//range函数最后一个形参是步长,默认1
var myList1 = range(10, 20, 2)
var myList2 = range(10,20)

// 输出所有数组元素
for ( x &lt;- myList1 ) {
    print( &quot; &quot; + x )
}
println()
for ( x &lt;- myList2 ) {
    print( &quot; &quot; + x )
}
</code></pre>
<ol start="5">
<li><a href="https://www.runoob.com/scala/scala-arrays.html">常用方法</a></li>
</ol>
<h3 id="集合">集合</h3>
<p><a href="https://www.runoob.com/scala/scala-collections.html">更多api</a></p>
<ol>
<li>List</li>
</ol>
<pre><code class="language-java">//定义
val list:List[String] = List(&quot;hello&quot;,&quot;world&quot;)
// 空列表
val empty: List[Nothing] = List()
// 二维列表
val dim: List[List[Int]] =
  List(
    List(1, 0, 0),
    List(0, 1, 0),
    List(0, 0, 1)
  )
//构造列表的两个基本单位是 Nil 和 ::
//Nil 也可以表示为一个空列表。
//以上实例我们可以写成如下所示：
// 整型列表
val nums = 1 :: (2 :: (3 :: (4 :: Nil)))
// 空列表
val empty2 = Nil
// 二维列表
val dim2 = (1 :: (0 :: (0 :: Nil))) ::
  (0 :: (1 :: (0 :: Nil))) ::
  (0 :: (0 :: (1 :: Nil))) :: Nil
print(nums)

//常用方法
val list:List[String] = List(&quot;hello&quot;,&quot;world&quot;,&quot;!!!&quot;)
//获取第一个元素
println(list.head)
//获取最后一个元素
println(list.tail)
//判空
println(list.isEmpty)
//列表链接 ::: 或 concat
val list2 = List(&quot;gu&quot;,&quot;ge&quot;)
println(list:::list2)
println(List.concat(list2,list))
//指定元素重复列表
println(List.fill(3)(&quot;HI!&quot;))
//List.tabulate() 方法是通过给定的函数来创建列表
//就是循环到n,每次循环得到的元素调用第二个形参的函数,将返回值存入list
println(List.tabulate(9)(n=&gt;2*n))
</code></pre>
<ol start="2">
<li>Set</li>
</ol>
<pre><code class="language-java">//定义
val set = Set(1,2,3)
//获取第一个元素
println(set.head)
//tail 返回一个集合，包含除了第一元素之外的其他元素
println(set.tail)
//拼接
val set2 = Set(4,5,6)
println(set ++ set2)
//交集
val set3 = Set(5,6,7)
println(set2.intersect(set3))
</code></pre>
<ol start="3">
<li>Map</li>
</ol>
<pre><code class="language-java">//定义
val map : Map[String,Int] = Map()
//or
var map2 = Map(&quot;k1&quot; -&gt; 1, &quot;k2&quot; -&gt; 2)
//add
map2 += (&quot;k3&quot;-&gt;3)
//keys
println(map2.keys)
//values
println(map2.values)
//合并
var map3 = Map(&quot;k4&quot; -&gt; 4, &quot;k5&quot; -&gt; 5)
println(map2 ++ map3)
</code></pre>
<ol start="4">
<li>Tuple元祖</li>
</ol>
<pre><code class="language-java">//元祖是不同类型值的集合
val t = (1, 3.14, &quot;Fred&quot;)
//或
val t2 = Tuple3(5, 5.14, &quot;Fred2&quot;)
//访问
println(t)
println(t._1)
println(t._2)
</code></pre>
<ol start="5">
<li>option</li>
</ol>
<pre><code class="language-java">//map访问key返回的是Option对象
//有值时Some 没有时None
//调用get获取具体值
val myMap: Map[String, String] = Map(&quot;key1&quot; -&gt; &quot;value&quot;)
val value1: Option[String] = myMap.get(&quot;key1&quot;)
val value2: Option[String] = myMap.get(&quot;key2&quot;)

println(value1) // Some(&quot;value&quot;)
println(value2) // None
println(value1.get) // value
//println(value2.get) //exception
//getOrElse代表为空时返回的值
println(value1.getOrElse(1)) //value
println(value2.getOrElse(1)) //1
</code></pre>
<h3 id="迭代器-iterator">迭代器 Iterator</h3>
<p>和Java的差不多,不是集合,是用于访问几个的方法</p>
<pre><code class="language-java">val it = Iterator(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;)

while (it.hasNext){
  println(it.next())
}
</code></pre>
<p><a href="https://www.runoob.com/scala/scala-iterators.html">其他api</a></p>
<h3 id="类和对象">类和对象</h3>
<ol>
<li>类的定义</li>
</ol>
<pre><code class="language-java">def main(args: Array[String]): Unit = {
  val point : Point= new Point(1,2)
  point.move(1,2)
}
//Scala中的类不声明为public，一个Scala源文件中可以有多个类
class Point(xc: Int, yc: Int) {
  var x: Int = xc
  var y: Int = yc

  def move(dx: Int, dy: Int) {
    x = x + dx
    y = y + dy
    println (&quot;x 的坐标点: &quot; + x);
    println (&quot;y 的坐标点: &quot; + y);
  }
  def name(): Unit ={
      println(&quot;point&quot;)
  }    
}
</code></pre>
<ol start="2">
<li>继承</li>
</ol>
<pre><code class="language-java">//1、重写一个非抽象方法必须使用override修饰符。
//2、只有主构造函数才可以往基类的构造函数里写参数。
//3、在子类中重写超类的抽象方法时，你不需要使用override关键字。
// 重载超类方法也不需要override关键字。
//子类的构造参数必须包含父类的
class Location( val xc: Int, val yc: Int, val zc :Int) 
                                    extends Point(xc, yc){
  var z: Int = zc

  def move(dx: Int, dy: Int, dz: Int) {
    x = x + dx
    y = y + dy
    z = z + dz
    println (&quot;x 的坐标点 : &quot; + x);
    println (&quot;y 的坐标点 : &quot; + y);
    println (&quot;z 的坐标点 : &quot; + z);
  }

  override def name(): Unit = {
    super.name()
    println(&quot;location&quot;)
  }
}
</code></pre>
<ol start="3">
<li>单例对象</li>
</ol>
<pre><code class="language-java">//scala没有static关键字
//需要有一个常量类里定义一些静态变量和方法,要用到object关键字 
//(main方法也在这里运行)
object ConstantUtil{
  val TYPE_ONE = &quot;1&quot;
  val TYPE_TWO = &quot;2&quot;
  val SEX_MAN = 1
  def LOG(msg: String ): Unit = {
    println(msg)
  }

  def main(args: Array[String]): Unit = {
    println(ConstantUtil.SEX_MAN)
    println(ConstantUtil.TYPE_ONE)
    ConstantUtil.LOG(&quot;sss&quot;)

  }
}


//Scala使用单例模式需要定义一个同名的class和object
//该object定义的对象称为class的伴生对象,可以访问其私有方法
class Conf private(val num:Int) {

  def print(): Unit ={
    println(num)
  }

}
object Conf {
  var conf1 = new Conf(1)
  var conf2 = new Conf(2)

  def main(args: Array[String]): Unit = {
    Conf.conf1.print()
  }
}
</code></pre>
<ol start="11">
<li>rait(特征)</li>
</ol>
<pre><code class="language-java">//Scala的特征相当于Java接口
//但是可以定义属性和方法的实现,这里更像是抽象类
//可以多个继承特征
trait Graph{

  var length : Double

  var width : Double

  def girth() : Double
}

class rect (len: Double,wid : Double) extends Graph{
  override var length: Double = len
  override var width: Double = wid

  override def girth(): Double = {
    length*width
  }
}
object Test{
  def main(args: Array[String]): Unit = {
    val rect = new rect(1,2)
    println(rect.girth())
  }
}
</code></pre>
<blockquote>
<p>特征也可以有构造器，由字段的初始化和其他特征体中的语句构成。这些语句在任何混入该特征的对象在构造时都会被执行。</p>
<blockquote>
<p>构造器的执行顺序：</p>
<ol>
<li>调用超类的构造器；</li>
<li>特征构造器在超类构造器之后、类构造器之前执行；</li>
<li>特征由左到右被构造；</li>
<li>每个特征当中，父特征先被构造；</li>
<li>如果多个特征共有一个父特征，父特征不会被重复构造</li>
<li>所有特征被构造完毕，子类被构造。</li>
<li>构造器的顺序是类的线性化的反向。线性化是描述某个类型的所有超类型的一种技术规格。</li>
</ol>
</blockquote>
</blockquote>
<h3 id="模式匹配">模式匹配</h3>
<pre><code class="language-java">//相当于Java的Seitch-case ,默认匹配1个直接返回, _相当于default,可以自动检查类型匹配
object Test2 {
  def main(args: Array[String]) {
    println(matchTest(&quot;two&quot;))
    println(matchTest(&quot;test&quot;))
    println(matchTest(1))
    println(matchTest(6))

  }
  def matchTest(x: Any): Any = x match {
    case 1 =&gt; &quot;one&quot;
    case &quot;two&quot; =&gt; 2
    case y: Int =&gt; &quot;scala.Int&quot;
    case _ =&gt; &quot;many&quot;
  }
}

//样例类 用于特殊的模式匹配
object Test {
   def main(args: Array[String]) {
       val alice = new Person(&quot;Alice&quot;, 25)
    val bob = new Person(&quot;Bob&quot;, 32)
       val charlie = new Person(&quot;Charlie&quot;, 32)
   
    for (person &lt;- List(alice, bob, charlie)) {
        person match {
            case Person(&quot;Alice&quot;, 25) =&gt; println(&quot;Hi Alice!&quot;)
            case Person(&quot;Bob&quot;, 32) =&gt; println(&quot;Hi Bob!&quot;)
            case Person(name, age) =&gt;
               println(&quot;Age: &quot; + age + &quot; year, name: &quot; + name + &quot;?&quot;)
         }
      }
   }
   // 样例类
   case class Person(name: String, age: Int)
}
</code></pre>
<h3 id="scala的正则">Scala的正则</h3>
<p><a href="https://www.runoob.com/scala/scala-regular-expressions.html">详细</a></p>
<h3 id="异常">异常</h3>
<pre><code class="language-java">//大部分和Java一样,捕获不同类型异常有点不一样
object Test4 {
  def main(args: Array[String]) {
    try {
      val f = new FileReader(&quot;input.txt&quot;)
    } catch {
      case ex: FileNotFoundException =&gt;{
        println(&quot;Missing file exception&quot;)
      }
      case ex: IOException =&gt; {
        println(&quot;IO Exception&quot;)
      }
    } finally{

    }
  }
}
</code></pre>
<h3 id="文件io">文件I/O</h3>
<pre><code class="language-java">//用的全是JAVA的API
object Test6 {
  def main(args: Array[String]) {
    val writer = new PrintWriter(new File(&quot;D://test.txt&quot; ))

    writer.write(&quot;1&quot;)
    writer.close()
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[就从我高中毕业说起(1)]]></title>
        <id>https://tobin4j.github.io/post/cong-wo-gao-zhong-bi-ye-shuo-qi-1</id>
        <link href="https://tobin4j.github.io/post/cong-wo-gao-zhong-bi-ye-shuo-qi-1">
        </link>
        <updated>2019-12-28T08:35:26.000Z</updated>
        <summary type="html"><![CDATA[<p>2013年的夏天，当考试结束铃声的响起，我毕业了。</p>
]]></summary>
        <content type="html"><![CDATA[<p>2013年的夏天，当考试结束铃声的响起，我毕业了。</p>
<!-- more -->
<h2 id="写在开始">写在开始</h2>
<p>一直想写点什么，却又不知道写什么，思来想去准备记录下高中毕业到目前横跨6年的时光，我所经历的吧。</p>
<p>很多事的记忆已经模糊，但总有些人和事，记忆犹新。</p>
<p>另外要说明一下的是，目前我已经步入社会三年多。往事如过往云烟，我不会带入当时任何的主观情绪，我希望以一个第三者的身份直面过去的我，客观真实的记录下这段经历。</p>
<hr>
<h2 id="正文">正文</h2>
<p>夏日的县城，空气弥漫着焦灼的气息。最后一场考试结束，对于每个考生自身意味着什么，这在当时是没有清晰认知的，于我而言，亦或是多数人，唯有<strong>自由</strong>两个字。</p>
<blockquote>
<p>高中毕业后你们就自由了。</p>
</blockquote>
<p>搞笑的是，在大学毕业后，我竟还是觉得这话没啥毛病，因为我大学过的也确实很自由（这就是后话了）。</p>
<p>其实我当时考的并不好，或者是，我压根就没考好过？但是在当时甚至很长一段时间，我都没有认识到这意味着什么。</p>
<p>回到教室收拾好书本，同学大都在笑着交谈今晚去哪里通宵，之后去哪旅游，这场12年的长跑，以及最后1年的“冲刺”终于落下帷幕，没有人担心自己考的好或不好，因为在我们班，绝大部分人就是闲庭漫步的走到终点的。</p>
<p>很多年后，我才意识到，他们大都是富二代，官二代，他们有不读书的资本，而我没有。</p>
<p>回宿舍的时候，我接到了一个电话，是我的同桌，也是我的暗恋对象<strong>小美</strong>（化名）打来的。</p>
<blockquote>
<p>“你充电宝还在我这。”</p>
</blockquote>
<p>当时就想着早点回家了，哪管什么充电宝啊。</p>
<blockquote>
<p>“送你了，我不要了。”</p>
</blockquote>
<p>那时已认为和她基本上也不可能了，毕业之后都要各奔东西，这也是我高三喜欢上他迟迟没有表白的原因。（总结就一个字，怂）</p>
<blockquote>
<p>“定情信物。”</p>
</blockquote>
<p>她俏皮的说完这四个字就挂了。</p>
<p>”呼~~。”风儿不再喧嚣，带着几片落叶盘旋在我脚边，知了也叫累了，难得的安静。</p>
<blockquote>
<p>青春期的女生仿佛永远也不会明白她随口说的话可以对同龄男生产生多大影响。</p>
</blockquote>
<p>“同学，哪里不舒服吗？要不去医务室看看？”</p>
<p>我立马回过神来，面色尴尬的对问话的老师说没事，然后小跑回宿舍。</p>
<p>收拾完东西后就是坐等父亲来接了。</p>
<p>看着被搬空的宿舍，想起在这里生活的一个个片段，那些嬉笑谩骂，深夜畅谈，那些吹过的牛逼，做过的糗事。</p>
<p>宿舍的书桌似乎还能看见那半夜伏着补作业的人。</p>
<p>我明白，这次一别，对很多人来说，可能就是一辈子了。</p>
<figure data-type="image" tabindex="1"><img src="https://tobin4j.github.io/post-images/1577613417413.jpeg" alt=""></figure>
<blockquote>
<p>我再也不属于这里了，我曾经最不喜欢的地方。</p>
</blockquote>
<hr>
<p>回家之后的细节记不大清了，应该是玩了几天的游戏吧。</p>
<p>嗯，以我当时那副德性估摸着就是这样。网瘾少年，但在那时我是绝不承认的。</p>
<hr>
<p>再之后就是谢师宴了，说到谢师宴，我想说说我的一位老师。</p>
<p>我们高中的时候理科是分了三个班的，大概就对应<strong>好，中，慢</strong>三个level。我当时高中有两个玩的比较好的小伙伴，高三分班的时候其中一个（下文就叫他<strong>小高</strong>吧）去了好班，我和另一个被分到了中班。这是背景。</p>
<blockquote>
<p>但其实小高成绩也一般，因为我们是按照最后一次期末考试成绩分班的，除了头部和尾部的同学，有不小的概率是会出现平时成绩排名在好班范围的进了中班，以及平时排名在中班的进了好班。小高就属于后者。</p>
</blockquote>
<p>其实作为一个还算比较好强的人（又懒，又好强，这往往是最容易摧毁一个人的），没有分到好班对那时的我应该是有些许打击的，但可能是时间过了太久的原因，已经回想不起分班前后的情绪波动了。</p>
<p>我们三人也还是像之前那样有事没事就粘着玩，高三的时间非常重要,但好像不适用与我们。哦不，是不适用于我们高三的绝大部分人。</p>
<p>小高的班主任也就是我要说的这位老师，化学老师，同时教中班和好班，长得是又高又帅那种，素有<strong>师草</strong>之称，平时也是私底下和我们都能开开玩笑的那种，在师生中人缘还算不错。</p>
<p>这位老师平时对我是什么态度呢？那时我说不上来，只不过看他总是对我那种似笑非笑的样子让我很不舒服。后来，我才知道，这大概是对我的嘲笑和蔑视。</p>
<p>是小高告诉我们的。这位老师找他谈话，总结就是一句，<strong>不要和他们玩，他们两个一看就是只能考专科的。</strong></p>
<blockquote>
<p>这里还是想说明一点，没有主观情绪，我们三人的成绩在当时是差不了太多的，虽然都不是很用功读书，但绝对不存在谁影响谁这个说法。</p>
</blockquote>
<p>我向来不惮以最大的恶意来揣测他人，这里也不评价这位老师这样说是否合适。现在想来，也只不过是这位老师劝说一位学生随口说出来的话而已。</p>
<p>我的性格是比较内向，不太自信，对身边的事敏感。</p>
<p>这句话对那时的我主要传达了三点信息：</p>
<ol>
<li>我的成绩很差，已经无可救药了。</li>
<li>是因为我的原因，影响了小高。</li>
<li>和我做朋友是一件非常没有前途的事。</li>
</ol>
<p>如果现在谁对我说这种话，我会呵呵一笑，心里还会问候一下他的族谱。但对于当时那个三观还没有完全建立的男生来说，这种对于一个人的彻底否定（当时的我是这么想的）对其自信的影响是非常大的。</p>
<p><strong>劝学固然没错，但为此去贬低他人，无能。</strong></p>
<hr>
<p>回到谢师宴。<br>
<br>
那一天有谁没来，谁给谁敬酒，谁哭了，谁又喝醉了早已无人记得，我只记得一件事！</p>
<p>酒过三巡之后，我尽量控制喝的不多，但脑子也是晕晕的，突然一阵起哄声，估计又是有人表白吧。</p>
<p>但当我看清台上的人，我傻眼了，是<strong>小美</strong>和另外一位男生。男生表白后，像是水到渠成一般，小美微微颔首表示同意，和男生牵手走到台上接受同学们的祝福。</p>
<p>“亲一个，亲一个。”酒精变成了帮凶，同学们都站起来附和。只剩我脸色铁青的坐在位置上，没有一个人注意到我的异样。</p>
<p>当男孩吻向女孩的脸颊时，我的脑袋已经乱到炸开，尽量控制住自己的失态，颤颤巍巍的站起来借口上厕所。之后就一个人直接离开了酒店，但当时一个人都没注意到我。</p>
<p>我一个人在路上走着，周围已经没有熟人，眼泪不住的往外留着，我明白，我永远失去小美了。</p>
<p>我从口袋里拿出一支粉色的圆珠笔，这是小美送我的，我一直保护的很好。”咔嚓。“轻轻一折，我把它扔到了河里。</p>
<blockquote>
<p>我已经忘记当时为什么随身带着这支笔，挺戏剧性的。</p>
</blockquote>
<hr>
<p>放假的日子是枯燥的，尤其是对我这种又宅又咸鱼的人。尽量不去想那天的事情，每天就是玩玩游戏或者外头闲逛。</p>
<p>出成绩的那天。</p>
<p>像是等待彩票开奖，明知道自己是什么AC样还是一脸期待和紧张。</p>
<p>429分。嗯，很符合我的气质。</p>
<blockquote>
<p>这个分数是什么概念呢？在逼乎上说就是那种把答题卡扔地上往上面踩一脚，根据鞋印算分都能考到的分数。我也不知道看到这分数我的内心为什么可以毫无波动，也许是早已麻木了。</p>
</blockquote>
<p>”要不复读吧。“我爸语重心长的叹了口气。</p>
<p>”不了。“</p>
<hr>
<p>之后就是准备填报志愿了，这成绩也就是专科了，那位老师说的还是很准的。</p>
<p>期间也接到过几个电话，就是那种野鸡学校打来的，一通balabala，在我还是懵逼的情况下，问我有没意向，”滚。“</p>
<p>当时的我是很迷茫的，对要去哪个学校，要学什么专业没有任何想法，也没什么爱好，父母也是什么都不知道，可想而知像我这种人变成废物只是时间问题。</p>
<p>接了这么多电话后我对一个叫<strong>应用电子技术</strong>的专业印象很深，也不知道为什么，然后填志愿就找了个还算可以的专科学校把这个当成第一志愿填上去了。</p>
<hr>
<p>录取结果出来了，很荣幸的是，我被我的第一志愿录取了。（emmm...我骄傲了吗？）</p>
<p>接着我就在班级群看了看同学的情况。</p>
<p>生活往往比电视剧更狗血，当我得知小美和我上个的是一个学校，一个专业，我整个人是懵逼的。</p>
<p>再然后几天我拿到了这个专业的分班表格，嗯，我和她还是一个班级的。</p>
<blockquote>
<p>命运和我开了一个极大的玩笑。</p>
</blockquote>
<hr>
<p>未完待续。。。</p>
]]></content>
    </entry>
</feed>